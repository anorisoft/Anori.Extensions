<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Anori.Extensions</name>
    </assembly>
    <members>
        <member name="T:Anori.Extensions.EnumerableExtensions">
            <summary>
                Enumerable Extensions.
            </summary>
        </member>
        <member name="M:Anori.Extensions.EnumerableExtensions.ValueAtOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Values at or null.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
                The value or null.
            </returns>
            <exception cref="T:System.ArgumentNullException">Source is null.</exception>
        </member>
        <member name="M:Anori.Extensions.EnumerableExtensions.ReferenceAtOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                References at or null.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
                The value or null.
            </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="T:Anori.Extensions.EventHandelExtensions">
            <summary>
                Event Handel Extensions.
            </summary>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            Raises the specified sender.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <returns>
            When one has been raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise(System.EventHandler,System.EventArgs)">
            <summary>
                Raises the specified e.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
            <returns>
                Is any raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise(System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
                Raises the specified e.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>
                Is any raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise(System.ComponentModel.PropertyChangedEventHandler,System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
                Raises the specified sender.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>Is any raised.</returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise(System.Action)">
            <summary>
                Raises the specified action.
            </summary>
            <param name="action">The action.</param>
            <returns>Is any raised.</returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``1(System.Func{``0})">
            <summary>
                Raises the specified function.
            </summary>
            <typeparam name="T">Resukt Type.</typeparam>
            <param name="func">The function.</param>
            <returns>Function result.</returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.RaiseAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
                Raises the asynchronous.
            </summary>
            <param name="func">The function.</param>
            <returns>
                Result of RaiseAsync as Boolean.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.RaiseAsync``1(System.Func{``0,System.Threading.Tasks.Task},``0)">
            <summary>
                Raises the asynchronous.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="func">The function.</param>
            <param name="arg">The argument.</param>
            <returns>
                Result of RaiseAsync as Boolean.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``1(System.Action{``0},``0)">
            <summary>
                Raises the specified parameter.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter">The parameter.</param>
            <returns>Is any is raised.</returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``2(System.Action{``0,``1},``0,``1)">
            <summary>
                Raises the specified parameter1.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter1">The parameter1.</param>
            <param name="parameter2">The parameter2.</param>
            <returns>When one has been raised.</returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``3(System.Action{``0,``1,``2},``0,``1,``2)">
            <summary>
                Raises the specified parameter1.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter1">The parameter1.</param>
            <param name="parameter2">The parameter2.</param>
            <param name="parameter3">The parameter3.</param>
            <returns>
                When one has been raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
                Raises the specified parameter1.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="action">The action.</param>
            <param name="parameter1">The parameter1.</param>
            <param name="parameter2">The parameter2.</param>
            <param name="parameter3">The parameter3.</param>
            <param name="parameter4">The parameter4.</param>
            <returns>
                When one has been raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
                Raises the specified sender.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
            <returns>
                When one has been raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``1(System.EventHandler{``0},``0)">
            <summary>
                Raises the specified e.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="e">The e.</param>
            <returns>
                When one has been raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``1(System.EventHandler{Anori.Common.EventArgs{``0}},System.Object,``0)">
            <summary>
                Raises the specified sender.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <param name="value">The value.</param>
            <returns>
                When one has been raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.Raise``1(System.EventHandler{Anori.Common.EventArgs{``0}},``0)">
            <summary>
                Raises the specified value.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="eventHandler">The event handler.</param>
            <param name="value">The value.</param>
            <returns>
                When one has been raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.RaiseEmpty(System.EventHandler)">
            <summary>
                Raises the empty.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <returns>
                When one has been raised.
            </returns>
        </member>
        <member name="M:Anori.Extensions.EventHandelExtensions.RaiseEmpty(System.EventHandler,System.Object)">
            <summary>
                Raises the empty.
            </summary>
            <param name="eventHandler">The event handler.</param>
            <param name="sender">The sender.</param>
            <returns>
                When one has been raised.
            </returns>
        </member>
        <member name="T:Anori.Extensions.ExpressionExtensions">
            <summary>
                Expression Extensions.
            </summary>
        </member>
        <member name="M:Anori.Extensions.ExpressionExtensions.ToAnonymousParametersString``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Converts to anonymousparametersstring.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Result of ToAnonymousParametersString as String.
            </returns>
        </member>
        <member name="M:Anori.Extensions.ExpressionExtensions.ToAnonymousParametersString``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
                Converts to anonymousparametersstring.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Result of ToAnonymousParametersString as String.
            </returns>
        </member>
        <member name="M:Anori.Extensions.ExpressionExtensions.ToAnonymousParametersString``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
                Converts to anonymousparametersstring.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Result of ToAnonymousParametersString as String.
            </returns>
        </member>
        <member name="M:Anori.Extensions.ExpressionExtensions.ToAnonymousParametersString``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
                Converts to anonymousparametersstring.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Result of ToAnonymousParametersString as String.
            </returns>
        </member>
        <member name="M:Anori.Extensions.ExpressionExtensions.ToAnonymousParametersString``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
                Converts to anonymousparametersstring.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Result of ToAnonymousParametersString as String.
            </returns>
        </member>
        <member name="M:Anori.Extensions.ExpressionExtensions.ToAnonymousParametersString``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
                Converts to anonymousparametersstring.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Result of ToAnonymousParametersString as String.
            </returns>
        </member>
        <member name="M:Anori.Extensions.ExpressionExtensions.ToAnonymousParametersString``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
                Converts to anonymousparametersstring.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <typeparam name="T5">The type of the 5.</typeparam>
            <typeparam name="T6">The type of the 6.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The expression.</param>
            <returns>
                Result of ToAnonymousParametersString as String.
            </returns>
        </member>
        <member name="M:Anori.Extensions.ExpressionExtensions.ReplaceParameters(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.String)">
            <summary>
                Replaces the parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="expressionString">The expression string.</param>
            <returns>
                Result of ReplaceParameters as String.
            </returns>
        </member>
        <member name="T:Anori.Extensions.ListExtensions">
            <summary>
                List Extensions.
            </summary>
        </member>
        <member name="M:Anori.Extensions.ListExtensions.ValueAtOrNull``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Values at or null.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>The value or null.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:Anori.Extensions.ListExtensions.ReferenceAtOrNull``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                References at or null.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
                The value or null.
            </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="T:Anori.Extensions.ReferenceTypeExtensions">
            <summary>
                Reference Type Extensions.
            </summary>
        </member>
        <member name="M:Anori.Extensions.ReferenceTypeExtensions.ElementAtOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Elements at or null.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
                Result of ElementAtOrNull as TSource.
            </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:Anori.Extensions.ReferenceTypeExtensions.ElementAtOrNull``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Elements at or null.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
            Result of ElementAtOrNull as TSource.
            </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:Anori.Extensions.ReferenceTypeExtensions.GetValueOrNull``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value or null.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>
            Result of GetValueOrNull as TValue.
            </returns>
            <exception cref="T:System.ArgumentNullException">dictionary is null.</exception>
        </member>
        <member name="M:Anori.Extensions.ReferenceTypeExtensions.CurrentFromEnumerator``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Currents from enumerator.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
                Result of CurrentFromEnumerator as Nullable&lt;TSource&gt;.
            </returns>
        </member>
        <member name="T:Anori.Extensions.TaskExtensions">
            <summary>
                Task Extensions.
            </summary>
        </member>
        <member name="M:Anori.Extensions.TaskExtensions.FireAndForgetSafeAsync(System.Threading.Tasks.Task,System.Action{System.Exception})">
            <summary>
                Fires the and forget safe asynchronous.
            </summary>
            <param name="task">The task.</param>
            <param name="error">The error.</param>
        </member>
        <member name="M:Anori.Extensions.TaskExtensions.FireAndForgetSafeAsync(System.Threading.Tasks.Task,System.Action,System.Action{System.Exception},System.Action,System.Action,System.Boolean)">
            <summary>
                Fires the and forget safe asynchronous.
            </summary>
            <param name="task">The task.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="final">The final.</param>
            <param name="cancel">The cancel.</param>
            <param name="configureAwait">if set to <c>true</c> [configure await].</param>
            <exception cref="T:System.ArgumentNullException">task is null.</exception>
        </member>
        <member name="M:Anori.Extensions.TaskExtensions.FireAndForgetSafeAsync``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Action{System.Exception},System.Action,System.Action,System.Boolean)">
            <summary>
                Fires the and forget safe asynchronous.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="task">The task.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="final">The final.</param>
            <param name="cancel">The cancel.</param>
            <param name="configureAwait">if set to <c>true</c> [configure await].</param>
            <exception cref="T:System.ArgumentNullException">task</exception>
        </member>
        <member name="M:Anori.Extensions.TaskExtensions.FireAndForgetSafeAsync``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Exception,System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
                Fires the and forget safe asynchronous.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="task">The task.</param>
            <param name="completed">The completed.</param>
            <param name="error">The error.</param>
            <param name="final">The final.</param>
            <param name="cancel">The cancel.</param>
            <param name="configureAwait">if set to <c>true</c> [configure await].</param>
            <exception cref="T:System.ArgumentNullException">task is null.</exception>
        </member>
        <member name="M:Anori.Extensions.TaskExtensions.IsFinished(System.Threading.Tasks.Task)">
            <summary>
                Determines whether this instance is finished.
            </summary>
            <param name="task">The task.</param>
            <returns>
                <c>true</c> if the specified task is finished; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">task is null.</exception>
        </member>
        <member name="T:Anori.Extensions.TypeExtensions">
            <summary>
            Type Extensions.
            </summary>
        </member>
        <member name="M:Anori.Extensions.TypeExtensions.IsNullable(System.Reflection.TypeInfo)">
            <summary>
                Determines whether this instance is nullable.
            </summary>
            <param name="genericTypeInfo">The generic type information.</param>
            <returns>
                <c>true</c> if the specified generic type information is nullable; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">genericTypeInfo is null.</exception>
        </member>
        <member name="M:Anori.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
                Determines whether this instance is nullable.
            </summary>
            <param name="type">The type.</param>
            <returns>
                <c>true</c> if the specified type is nullable; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">type is null.</exception>
        </member>
        <member name="M:Anori.Extensions.TypeExtensions.IsNullable``1">
            <summary>
                Determines whether this instance is nullable.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <returns>
                <c>true</c> if this instance is nullable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Anori.Extensions.ValueTypeExtensions">
            <summary>
                ValueType Extensions.
            </summary>
        </member>
        <member name="M:Anori.Extensions.ValueTypeExtensions.ElementAtOrNull``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Elements at or null.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
            Result of ElementAtOrNull as Nullable{TSource}.
            </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:Anori.Extensions.ValueTypeExtensions.ElementAtOrNull``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
                Get element at index or is no element return null.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
                Result of ElementAtOrNull as Nullable{TSource}.
            </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:Anori.Extensions.ValueTypeExtensions.GetValueOrNull``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value or null.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <returns>
            Result of GetValueOrNull as Nullable{TValue};.
            </returns>
            <exception cref="T:System.ArgumentNullException">dictionary is null.</exception>
        </member>
        <member name="M:Anori.Extensions.ValueTypeExtensions.CurrentFromEnumerator``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Currents from enumerator.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="index">The index.</param>
            <returns>
                Result of CurrentFromEnumerator as Nullable&lt;TSource&gt;.
            </returns>
        </member>
    </members>
</doc>
