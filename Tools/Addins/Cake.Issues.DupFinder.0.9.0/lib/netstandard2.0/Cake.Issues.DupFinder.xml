<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Issues.DupFinder</name>
    </assembly>
    <members>
        <member name="T:Cake.Issues.DupFinder.DupFinderIssuesAliases">
            <summary>
            Contains functionality for reading issues from JetBrains dupFinder log files.
            </summary>
        </member>
        <member name="M:Cake.Issues.DupFinder.DupFinderIssuesAliases.DupFinderIssuesProviderTypeName(Cake.Core.ICakeContext)">
            <summary>
            Gets the name of the dupFinder issue provider.
            This name can be used to identify issues based on the <see cref="P:Cake.Issues.IIssue.ProviderType"/> property.
            </summary>
            <param name="context">The context.</param>
            <returns>Name of the dupFinder issue provider.</returns>
        </member>
        <member name="M:Cake.Issues.DupFinder.DupFinderIssuesAliases.DupFinderIssuesFromFilePath(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Gets an instance of a provider for issues reported by JetBrains dupFinder using a log file from disk.
            </summary>
            <param name="context">The context.</param>
            <param name="logFilePath">Path to the dupFinder log file.</param>
            <returns>Instance of a provider for issues reported by JetBrains dupFinder.</returns>
            <example>
            <para>Read issues reported by JetBrains dupFinder:</para>
            <code>
            <![CDATA[
                var issues =
                    ReadIssues(
                        DupFinderIssuesFromFilePath(@"c:\build\DupFinder.xml"),
                        @"c:\repo");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Issues.DupFinder.DupFinderIssuesAliases.DupFinderIssuesFromContent(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets an instance of a provider for issues reported by JetBrains dupFinder using log file content.
            </summary>
            <param name="context">The context.</param>
            <param name="logFileContent">Content of the dupFinder log file.</param>
            <returns>Instance of a provider for issues reported by JetBrains dupFinder.</returns>
            <example>
            <para>Read issues reported by JetBrains dupFinder:</para>
            <code>
            <![CDATA[
                var issues =
                    ReadIssues(
                        DupFinderIssuesFromContent(logFileContent)),
                        @"c:\repo");
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Issues.DupFinder.DupFinderIssuesAliases.DupFinderIssues(Cake.Core.ICakeContext,Cake.Issues.DupFinder.DupFinderIssuesSettings)">
             <summary>
             Gets an instance of a provider for issues reported by JetBrains dupFinder using specified settings.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">Settings for reading the dupFinder log.</param>
             <returns>Instance of a provider for issues reported by JetBrains dupFinder.</returns>
             <example>
             <para>Read issues reported by JetBrains dupFinder:</para>
             <code>
             <![CDATA[
                 var settings =
                     new DupFinderIssuesSettings(
                         @"c:\build\DupFinder.xml));
            
                 var issues =
                     ReadIssues(
                         DupFinderIssues(settings),
                         @"c:\repo");
             ]]>
             </code>
             </example>
        </member>
        <member name="T:Cake.Issues.DupFinder.DupFinderIssuesProvider">
            <summary>
            Provider for issues reported by JetBrains dupFinder.
            </summary>
        </member>
        <member name="M:Cake.Issues.DupFinder.DupFinderIssuesProvider.#ctor(Cake.Core.Diagnostics.ICakeLog,Cake.Issues.DupFinder.DupFinderIssuesSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Issues.DupFinder.DupFinderIssuesProvider"/> class.
            </summary>
            <param name="log">The Cake log context.</param>
            <param name="issueProviderSettings">Settings for the issue provider.</param>
        </member>
        <member name="P:Cake.Issues.DupFinder.DupFinderIssuesProvider.ProviderName">
            <inheritdoc />
        </member>
        <member name="M:Cake.Issues.DupFinder.DupFinderIssuesProvider.InternalReadIssues">
            <inheritdoc />
        </member>
        <member name="T:Cake.Issues.DupFinder.DupFinderIssuesSettings">
            <summary>
            Settings for <see cref="T:Cake.Issues.DupFinder.DupFinderIssuesAliases"/>.
            </summary>
        </member>
        <member name="M:Cake.Issues.DupFinder.DupFinderIssuesSettings.#ctor(Cake.Core.IO.FilePath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Issues.DupFinder.DupFinderIssuesSettings"/> class.
            </summary>
            <param name="logFilePath">Path to the Inspect Code log file.</param>
        </member>
        <member name="M:Cake.Issues.DupFinder.DupFinderIssuesSettings.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Issues.DupFinder.DupFinderIssuesSettings"/> class.
            </summary>
            <param name="logFileContent">Content of the Inspect Code log file.</param>
        </member>
    </members>
</doc>
